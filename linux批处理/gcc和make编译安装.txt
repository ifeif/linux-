对于绝大多数软件，我们建议您使用linux自带的软件包管理器来安装它。
在少数情况下，例如某软件没有以软件包的格式发布，
或者需要定制适合自己的软件，您可以通过编译源代码的方式安装它。

1.首先需要下载软件的源码包，并且将它解包为一些源代码文件。
并了便于管理，建议将下载的源码包移动到 /usr/local/src/ 目录下，并在这里解包。
tar -xzf -C /usr/local/src/ xxx.tar.gz	解包源码
cd /usr/local/src/xxx_ver		进入解包后的源码目录

2.源码目录中通常有一个 configure 脚本，用来配置即将开始的编译过程。您可以执行它
./configure --prefix=/usr/loca/xxx
configure脚本会自动检测软件的编译环境和依赖关系，并且生成 Makefile 文件。
使用带参数的命令 ./configure --help ，或者阅读 INSTALL 文件，查看该脚本允许的参数。
例如使用--prefix=/usr/local/xxx 参数，将软件的安装目录设定为 /usr/local/xxx/
(如果一定要将软件安装在单独目录下，建议您安装在这里)

3.执行 make 命令，系统会根据 Makefile 文件中的设定，
通过 make 工具调用编译器和所需资源文件，将源代码编译成目标文件(二进制包)。
make

4.执行 make install 命令， make 工具会自动链接目标文件和库文件，
将最终生成的文件拷贝到 Makefile 文件设定的路径中，
并且完成更改文件的属性，删除残留文件等活动。
make install

5.清除之前编译的可执行文件及配置文件
(清除上次的make命令所产生的object文件(后缀为".o"的文件)及可执行文件)
make clean

上面三个操作可以合成一条命令完成所有操作：
make install clean

6.现在，编译安装已经完成，为了更方便的使用它，
需要给程序的可执行文件作一个符号链接(快捷方式)。
ln -sf /usr/local/xxx/可执行文件 /usr/local/bin/可执行文件

部分介绍：
make是一个命令工具，它从Makefile中读取指令，然后编译。根据Makefile文件编译源代码、链接、生成目标文件和可执行文件。
makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作。
makefile带来的好处就是——“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大的提高了软件开发的效率。
configure是一个shell脚本，它可以自动设定源程序以符合各种不同平台上Unix系统的特性，
并且根据系统叁数及环境产生合适的Makefile文件或是C的头文件(header file)，让源程序可以很方便地在这些不同的平台上被编译连接。