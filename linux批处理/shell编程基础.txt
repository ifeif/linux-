通配符：通用信息匹配符号
*	#匹配任意字符
？	#匹配单个字符
[a]	#匹配包含a的单个字符
[a-z]	#匹配a到z范围内的单个字符
[^a]	#反向匹配，匹配除a以外的其他字符行,不包含空行
[^a-z]	#匹配不在a到z范围内的其他字符行,不包含空行
'string'	#表示固定字符串，不可拆分
{1..9}	#用于批量创建连续文件

颜色区分文件类型：
黑色：普通文本文件
绿色：可执行文件
蓝色：目录
黄色：设备
红色：压缩文件
棕色：管道文件(p)
淡蓝色：链接文件(l)
粉红色：套接字文件(s)

命令别名：
查看已定义别名：alias
自定义命令别名：alias 别名=命令
删除自定义别名：unalias 别名

shell是连接内核和应用程序的桥梁，我们所说的shell就是解释器软件的集合，bash是其中一个解释器。
/bin/bash是大多数linux中默认的shell解释器
cat /etc/shells	#查看linux已安装的shell解释器

如何分区shell脚本：
文件的后缀.sh对linux来说没有任何意义，linux以文件的二进制头来区分文件类型。
linux系统大部分的文件都属于文本文件
文本文件的第一行可以声明文本所使用的解释器，同样也告诉用户文本所使用的语法。
#!/bin/bash	声明脚本使用指定解释器执行
#		注释,语句和注释之间必须要有空格
#!这两个符号合在一起叫做shebang。
./文件名命令执行程序时会判断文件是文本文件还是二进制文件，如果是文本文件则创建子shell进程执行脚本，
如果是二进制程序则使用execl族函数去创建一个新的进程来运行新的程序。
当用./文件名的方式执行脚本时，系统注意到脚本的首行为#!/bin/bash，会以/bin/bash ./文件名的方式执行脚本。
如果脚本文件中没有#!这一行，那么执行时会默认采用当前Shell去解释这个脚本(即：$SHELL环境变量）。
示例：
	echo '#!/bin/cat' > test
	chmod 777 test
	./test -n相当于/bin/cat ./test -n
执行shell脚本：
chmod +x 脚本名	#给所有用户添加执行权限
./文件名		#执行当前目录下的应用程序，而不是环境变量里配置目录的应用程序。脚本则在子shell运行，不影响当前shell环境
以下方式不需要执行权限：
sh 脚本名		#使用sh解释器执行，在子shell运行，不影响当前shell环境
bash 脚本名	#使用bash解释器执行，在子shell运行，不影响当前shell环境
source或. 脚本名	#source是解释器的内部命令，在当前shell中执行
注：source或.命令在当前启动的shell解释器中执行脚本。会影响当前使用的shell环境。在哪个shell执行source命令就在哪个shell执行脚本。
诺在一个脚本里用source或.命令执行另一个脚本，则这两个脚本属于同一个作用域(同一个shell执行)。
诺在root用户下使用su命令切换到另一个用户，那么该用户的shell作为子shell运行在root用户的shell下面。exit命令可以退出当前子shell。
什么是子shell：
当不用source或.命令在当前的shell中执行脚本时，那么系统会启动一个新的子进程，脚本在子shell中执行。
子shell中的变量和父shell的变量处在不同的命名空间。子shell执行完脚本会自动退出(exit)。

单引号：
单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的。
双引号：
双引号里可以引用变量，可以出现转义字符。
截取子字符串(切片)：
	string="runoob"
	echo ${string:1:4} # 输出 unoo
获取字符串长度：
	string="runoob"
	echo ${#string} #输出 6

shell是弱类型语言，除了内置变量以外，自定义变量名的命名规范和大多数编程语言一样，区分大小写，开头不能为数字，可以使用_。
默认定义的变量只有在当前shell内有效，子shell不能引用。
变量：
	格式：变量名=值
	var="HelloWold"
引用变量：
	格式：$变量名 或者 ${变量名}	#普通变量可以不加{}，加花括号是为了帮助解释器识别变量名的边界
	echo $var 或者 echo ${var}
删除变量：
	unset 变量名
数组：
	格式：数组名=(值1 值2 ... 值n)
	array_name=(value0 value1 value2 value3)
引用数组：
	格式：${数组名[下标]}
	value=${array_name[n]}
使用 @或* 符号可以获取数组中的所有元素：
	echo ${array_name[@或*]}
获取数组长度：
	length=${#array_name[@或*]}

环境变量：
环境变量在任何子shell内都能引用，但是父shell不能引用子shell的环境变量。
env		#查看系统所有环境变量
set		#查看系统所有变量和函数
export关键字修饰变量为环境变量，在当前shell和子shell里都有效，一次修饰，永久生效。
格式：export 变量名=值
作用域：
默认定义的变量作用域只在当前shell有效。
export关键字修饰的变量的作用域在当前shell和子shell里有效。

查看命令的类型：
type echo	#查看echo是外部命令还是内部命令，如果外部命令则输出命令程序的路径
内部命令：
解释器内部的指令，会被直接执行
外部命令：
外部命令定义在环境变量PATH里面
echo $PATH	#输出PATH变量值
环境变量统一使用大写字母命名。
PATH环境变量默认不包含当前目录，和win10不一样，win10默认在同级目录下搜索，找不到再到环境变量path里搜索。
PATH是由多个路劲值组成的变量，每个路径之间用冒号(:)间隔
如果遇到有同名的命令，那么PATH里面哪个目录先被查询，则哪个目录下的命令就会被先执行
PATH=$PATH:/root/bin	#在当前PATH变量的开头添加/root/bin目录，临时有效
在配置文件添加环境变量可以永久生效
vim /etc/profile	#全局环境脚本
source /etc/profile	#执行脚本使添加的环境变量生效
vim ~/.bashrc	#当前用户环境脚本
source ~/.bashrc	#执行脚本使添加的环境变量生效
su - 用户名	#该命令会重新加载shell解释器，也可以使添加的环境变量生效。-:把环境变量也变更为新用户的
为什么可以永久生效？
系统开机用户登陆后bash解释器首先会执行/etc/profile脚本，然后再执行用户主目录下的.bashrc脚本

PATH这个变量特殊说明一下:
如果是超级用户登录,在没有执行/etc/profile之前,PATH已经设定了下面的路径:
/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
如果是普通用户,PATH在/etc/profile执行之前设定了以下的路径:
/usr/local/bin:/bin:/usr/bin
ubuntu系统的/etc/environment文件：
保存ubuntu系统的环境变量，可以在该文件里添加环境变量。
通常当前用户的外部命令应用程序都存放在~/bin目录中
若脚本文件在当前目录，应使用 ./脚本名

变量：
除了内置变量以外，自定义变量的命名都遵守大部分编程语言的规范
内置变量：
$0	#执行的文件名
$n	#执行脚本的第n个参数值
$#	#执行脚本的参数个数
$*	#执行脚本的所有参数,将所有参数看成一个整体
$@	#与$*相同，但是把每个参数当成单独的字段
$$	#当前运行的shell进程ID号
$!	#后台运行的最后一个进程的ID号
$?	#上一条命令的执行结果，0为成功，非0为失败。

参考资料：
https://blog.csdn.net/u012294618/article/details/78427864
https://www.cnblogs.com/bohaoist/p/4964933.html
https://www.cnblogs.com/jpfss/p/11107080.html
https://www.runoob.com/linux/linux-shell.html
https://www.cnblogs.com/lh03061238/p/9952759.html