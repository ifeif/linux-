数据内容一致性：
每个线程都有自己的寄存器，共享全局变量，当两个线程同时拷贝内存的共享数据到自己的寄存器时，
两个线程对数据做相应的操作又同时将数据放回内存，最终只有一个线程对数据的修改有效。
单线程同步：
当有多份数据时，保证这多份数据的内容在某一时间段内一致的操作就叫同步。
程序用阻塞的方式来保证接下来操作的多份数据内容一致。
阻塞是指主进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，
那么主进程将会一直等待下去，直到收到请求返回的信息才会继续往下执行。
同步在一定程度上可以看做是单线程的。
多线程异步：
异步操作不需要保证多份数据的内容在某一时间段内一致，主进程不需要等待请求返回信息，而是继续往下执行(非阻塞)。
当有消息返回时由另一个进程或者回调函数通知主进程进行处理。这样可以提高主进程的执行效率。
异步在一定程度上可以看做是多线程的。

实现同步的机制主要有临界区、互斥、信号量和事件：
临界区：通过对多线程的串行化来访问公共资源或一段代码，速度快，适合控制数据访问。
在任意时刻只允许一个线程对共享资源进行访问，如果有多个线程试图访问公共资源，
那么在有一个线程进入后，其他试图访问公共资源的线程将被挂起，
并一直等到进入临界区的线程离开，临界区在被释放后，其他线程才可以抢占。

互斥量：采用互斥对象机制。 只有拥有互斥对象的线程才有访问公共资源的权限，
因为互斥对象只有一个，所以能保证公共资源不会同时被多个线程访问。
互斥不仅能实现同一应用程序的公共资源安全共享，还能实现不同应用程序的公共资源安全共享。
互斥量比临界区复杂。因为使用互斥不仅仅能够在同一应用程序不同线程中实现资源的安全共享，
而且可以在不同应用程序的线程之间实现对资源的安全共享。

信号量：它允许多个线程在同一时刻访问同一资源，但是需要限制在同一时刻访问此资源的最大线程数目。
信号量对象对线程的同步方式与前面几种方法不同，信号允许多个线程同时使用共享资源，
这与操作系统中的PV操作相同。它指出了同时访问共享资源的线程最大数目。
它允许多个线程在同一时刻访问同一资源，但是需要限制在同一时刻访问此资源的最大线程数目。

事件：通过通知操作的方式来保持线程的同步，还可以方便实现对多个线程的优先级比较的操作。

参考资料：
https://blog.csdn.net/yexiangcsdn/article/details/84971827