查看某个内核参数：
sysctl -n net.ipv4.ip_forward
或者查看/proc/sys目录下对应的内核参数文件
cat /proc/sys/net/ipv4/ip_forward 
临时修改内核参数：
sysctl -w net.ipv4.ip_forward=1
或者修改/proc/sys目录下对应的内核参数映射文件(/proc/sys/是一个虚拟文件系统)
echo 1 > /proc/sys/net/ipv4/ip_forward
永久修改内核参数：
net.ipv4.ip_forward = 1 >> /etc/sysctl.conf
sysctl -p或者systemctl restart network		#读取配置，立即生效
sysctl选项：
 -w	临时改变某个指定参数的值
 -a	显示所有的系统参数
 -p	从/etc/sysctl.conf文件中加载系统参数

net.ipv4.ip_forward = 0
#该文件内容为0 表示禁止数据包转发 1表示允许
net.ipv4.conf.all.rp_filter = 0
net.ipv4.conf.default.rp_filter = 0
#是否开启对数据包源地址(反向路由)的校验，默认为1(开启)。关闭可提高网络性能，开启可减少DDoS攻击和防止IP伪造
#备注：all.rp_filter和default.rp_filter只要有一个是1，那么rp_filter就会被启用。两个都设为0才能关闭rp_filter
#用通俗的话解释一下，Reverse Path Filtering模块会将传入的数据包的源地址和目的地址(srcIP->dstIP)调转过来成为(dstIP->srcIP)，然后在路由表中查找这个(dstIP->srcIP) 的路由
net.ipv4.conf.default.accept_source_route = 0
#是否接受源路由(source route)，关闭可提高性能，开启则提高安全性

kernel.sysrq = 0
#是否开启sysrq(魔术组合键，无论内核正在做什么都会做出响应),0为disable sysrq, 1为enable sysrq completely，一般用不到建议关闭
kernel.core_uses_pid = 1
#如果这个文件的内容被配置成1,那么即使core_pattern中没有设置%p,最后生成的core dump文件名仍会加上进程ID
kernel.unknown_nmi_panic = 0
#该参数的值影响的行为(非屏蔽中断处理).当这个值为非0,未知的NMI受阻,PANIC出现.这时,内核调试信息显示控制台,则可以减轻系统中的程序挂起.
kernel.msgmnb = 65536
#指定内核中每个消息队列的最大字节限制
kernel.msgmax = 65536
#指定内核中单个消息的最大长度(bytes).进程间的消息传递是在内核的内存中进行的,不会交换到磁盘上,所以如果增大该值,则将增大操作系统所使用的内存数量
kernel.shmmax = 68719476736
#指定共享内存片段的最大尺寸(bytes)
kernel.shmall = 4294967296
#指定可分配的共享内存数量
vm.swappiness = 10
#内存不足时=0,进行少量交换 而不禁用交换=1,系统内存足够时=10 提高性能,默认值=60,值=100将积极使用交换空间
vm.overcommit_memory = 1
#0 — 默认设置。当应用进程尝试申请内存时，内核会做一个检测。内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，允许申请内存；否则，内存申请失败，并把错误返回给应用进程。举个例子，比如1G的机器，A进程已经使用了500M，当有另外进程尝试malloc500M的内存时，内核就会进行check，如果发现超出剩余可用内存，就会提示失败。
#1 — 对于内存的申请请求，内核不会做任何check(检查)，直到物理内存用完，触发OOM杀用户态进程。1G的机器，A进程500M，B进程尝试malloc(分配)500M，会成功，但是一旦kernel发现内存使用率接近1个G(内核有策略)，就触发OOM，杀掉一些用户态的进程(有策略的杀)。
#2 — 当请求申请的内存 >= SWAP内存大小 + 物理内存 * N，则拒绝此次内存申请。解释下这个N：N是一个百分比，根据overcommit_ratio/100来确定，比如overcommit_ratio=50，那么N就是50%。
vm.overcommit_ratio = 90
#默认为50，为物理内存分配时的比例。只有当 vm.overcommit_memory = 2 的时候才会生效
#最大能分配的内存公式:CommitLimit = (Physical RAM * vm.overcommit_ratio / 100) + Swap

net.ipv4.tcp_ecn = 0
#关闭显式拥塞通知，此功能允许路由器因缓冲被填满而主动丢弃数据包之前向数据包接收端发出拥塞信号，再由接收端通知(通过ack包)发送端降低下一个数据包的发送速率。通过降低传输速率避免因拥塞而导致数据包被丢弃。
#默认值为2。0：关闭ECN。1：在传入连接请求时接受ECN，并在传出连接时尝试发起ECN请求。2：在传入连接请求时接受ECN，但不在传出连接上发起ECN请求。
#开启ECN后，每次都会尝试带ENC标志位的TCP连接建立请求，仅当TCP连接的两端都开启ECN并且链路上的路由器都支持ENC时，才使用ECN。ECN标志位包含在TCP的SYN报文中。
#个人操作系统(例如win10、win11)的ecn默认是关闭的。如果只有一端开启ecn，那么发送端会在几次(具体几次要看最大SYN包重传次数)传输失败后关闭ECN标志再进行TCP连接的建立。关闭ENC可加快TCP连接的建立。
net.ipv4.tcp_ecn_fallback = 1
#开启ecn后，该选项才会生效。默认值为1，表示启用ecn回退(允许关闭ecn标志位)。允许TCP连接建立失败后关闭ecn标志再进行TCP连接的建立。
net.ipv4.tcp_sack = 1
#启用有选择的应答，这可以通过有选择地应答乱序接收到的报文来提高性能(这样可以让发送者只发送丢失的报文段)；对于广域网通信来说，这个选项应该启用，但是这会增加对 CPU 的占用。SACK是对ACK包的一种优化, 能够提供比ACK能够提供更好的重传机制
net.ipv4.tcp_timestamps = 1
#开启TCP时间戳，以一种比超时重发更精确的方法来启用对RTT的计算；为了实现更好的性能应该启用这个选项，默认即为1
net.ipv4.tcp_tw_reuse = 1
#开启重用,允许TIME-WAIT sockets重新用于建立新的TCP连接，默认为0
net.ipv4.tcp_tw_recycle = 1
#表示开启对TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭。注意：Linux从4.12内核版本开始移除了tcp_tw_recycle的配置。
可减少大量TIME_WAIT状态的套接字
net.ipv4.tcp_syncookies = 1
#开启SYN Cookies,当出现SYN等待队列溢出时,启用cookies来处理,可防范少量SYN攻击,默认为0,表示关闭
net.ipv4.tcp_fin_timeout = 30
#如果套接字有本端要求关闭，这个参数决定了TCP连接在本端保持FIN-WAIT-2状态的最长超时，远端则为保持CLOSE_WAIT状态的最长超时，远端可以出错并永远关闭连接,甚至以外宕机，缺省值是60秒
#但要记住的是,即使你的机器是一个轻载的WEB服务器，也有因为大量的死套接字而内存溢出的风险,FIN-WAIT-2的危险性比FIN-WAIT-1要小,因为它最多只能吃掉1.5K内存,但是他们生存期长些
net.ipv4.tcp_syn_retries = 3
#最大SYN包重传次数，在内核放弃建立TCP连接之前(超时)重复发送SYN包的数量，可以设置为1
net.ipv4.tcp_synack_retries = 3
#为了打开对端的连接,内核需要发送一个SYN并附带一个回应前面一个SYN的ACK,也就是所谓的三次握手中的第二次握手,这个设置决定了内核放弃连接之前(超时)重复发送SYN+ACK包的数量，可以设置为1
net.ipv4.tcp_max_orphans = 262144
#系统中最多有多少个TCP套接字不被关联到任何一个用户文件句柄上,如果超过这个数字,孤儿连接将即刻被复位并打印出警告信息,这个限制仅仅是为了防止简单的Dos攻击,不能过分依靠它或者人为地减小这个值,更应该增加这个值(如果增加了内存之后)
net.ipv4.tcp_keepalive_time = 1800
#当keepzlived起作用的时候,TCP发送keepzlived消息(探测包)的频度(间隔),缺省是两小时,可以设置为60秒.Azure云服务器推荐为1800秒(30分钟)
#如果长期不活动的空闲连接出现次数较多，而丢失接收方的情况出现较少，您可能会要提高该值以减少开销。通常，1800秒是首选值，从而一半的已关闭连接会在 30 分钟内被检测到
#Azure云服务器可以在IP配置里设置入站发起流的空闲超时来保持TCP连接打开而不依赖于客户端发送保存活动消息，不过设置范围只能为4~30分钟，出站发起流的空闲超时固定为 4 分钟
net.ipv4.tcp_keepalive_probes = 3
#如果对方没有应答，keepalive探测包尝试重发的次数，默认9次
net.ipv4.tcp_keepalive_intvl = 15
#keepalive探测包重试时的发送间隔，默认75秒
net.ipv4.tcp_max_tw_buckets = 5000
#表示系统同时保持TIME_WAIT状态的套接字最大数量.如果超过此数,TIME_WAIT套接字会被立刻清除并且打印警告信息.之所以要设定这个限制,纯粹为了抵御那些简单的DoS攻击,不过,过多的TIME_WAIT套接字也会消耗服务器资源,甚至死机,默认为18000
net.ipv4.tcp_slow_start_after_idle = 0
#关闭tcp连接空闲时的慢启动，即TCP连接在空闲一段时间后，每次都会进入慢启动。慢启动是tcp用来解决网络阻塞的一种机制，关闭可提高网络传输速率

net.ipv4.conf.all.send_redirects = 0
#禁止转发重定向报文
net.ipv4.conf.default.send_redirects = 0
#不充当路由器
net.ipv4.conf.all.secure_redirects = 0
#如果服务器不作为网关/路由器,该值建议设置为0
net.ipv4.conf.default.secure_redirects = 0
#禁止转发安全ICMP重定向报文
net.ipv4.conf.all.accept_redirects = 0
#禁止包含源路由的ip包
net.ipv4.conf.default.accept_redirects = 0
#禁止包含源路由的ip包
net.ipv4.route.gc_timeout = 100
#路由缓存(表项)刷新频率，多长时间更新路由，默认是300秒

##### iptables ##############
net.ipv4.neigh.default.gc_thresh1 = 2048
#存在于ARP高速缓存中的记录最少条数,如果少于这个数,垃圾收集器将不会运行.缺省值是128。
net.ipv4.neigh.default.gc_thresh2 = 4096
#保存在ARP高速缓存中的最多记录的软限制.垃圾收集器在开始收集前,允许记录数超过这个数字 5 秒.缺省值是 512
net.ipv4.neigh.default.gc_thresh3 = 8192
#保存在ARP高速缓存中的最多记录的硬限制,一旦高速缓存中的数目高于此,垃圾收集器将马上运行.缺省值是1024
net.ipv4.neigh.default.gc_stale_time = 120
#ARP缓存条目超时时间，默认为60秒，通俗说就是ARP缓存(表项)刷新频率.(检查一次ARP记录有效性的周期)
net.ipv4.conf.default.arp_announce=2 
net.ipv4.conf.all.arp_announce=2
#发送arp请求时的动作，始终使用与目的IP地址对应的最佳本地IP地址作为ARP请求的源IP地址
#0:允许使用任意网卡上的IP地址作为arp请求的源地址，1:尽量仅向该网卡回应与该网段匹配的ARP报文
net.ipv4.conf.default.arp_ignore=1
net.ipv4.conf.all.arp_ignore=1
#响应arp请求时的动作， 
#0:响应任意网卡上接收到的对本机IP地址的arp请求，1:只响应目的IP为接收网卡上的IP的arp请求
net.ipv4.ip_local_port_range = 1024 65535
#用于定义网络连接可用作其源(本地)端口的最小和最大端口的限制,同时适用于TCP和UDP连接
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1 
net.ipv6.conf.lo.disable_ipv6 = 0
#禁用整个系统所有接口的IPv6，如果设置为0则表示启用IPv6。也可以禁用特定网卡的IPv6地址：net.ipv6.conf.网卡名.disable_ipv6 = 1
#备注：all.disable_ipv6和default.disable_ipv6只要有一个是0，那么ipv6就会被启用。两个都设为1才能关闭ipv6
#不建议禁用环回接口的IPv6地址，因为ssh服务需要用到环回接口的IPv6进行X11转发(也可以让ssh服务只使用IPv4地址进行X11转发)
fs.file-max = 1000000
#系统最大打开文件描述符数
fs.inotify.max_user_watches = 10000000
#表示同一用户同时可以添加的watch数目(watch一般是针对目录,决定了同时同一用户可以监控的目录数量)

net.core.optmem_max = 16777216
#该参数指定了每个套接字缓冲区所允许的最大值
net.core.rmem_max = 16777216
#接收套接字缓冲区大小的最大值(以字节为单位)
net.core.wmem_max = 16777216
#发送套接字缓冲区大小的最大值(以字节为单位)
net.core.rmem_default = 262144
#接收套接字缓冲区大小的默认值(以字节为单位)
net.core.wmem_default = 262144
#发送套接字缓冲区大小的默认值(以字节为单位)
net.core.somaxconn = 65535
#用来限制监听(LISTEN)队列数据包的最大数量,超过这个数量就会导致链接超时或者触发重传机制
net.core.netdev_max_backlog = 262144
#当网卡接收数据包的速度大于内核处理的速度时,会有一个队列保存这些数据包.这个参数表示该队列的最大值
net.ipv4.tcp_max_syn_backlog = 8192
#表示SYN队列长度,默认1024,改成8192,可以容纳更多等待连接的网络连接数
net.netfilter.nf_conntrack_max = 1000000
#允许的最大连接跟踪条目数(NAT转换记录)，是在内核内存中netfilter可以同时处理的"任务"(连接跟踪条目)，默认为262144条
#conntrack是netfilter提供的连接跟踪机制，此机制允许内核"审查"通过此处的所有网络数据包，并能识别出此数据包属于哪个网络连接(socket连接)
#因此，连接跟踪机制使内核能够跟踪并记录通过此处的所有网络连接及其状态。conntrack机制是iptables实现状态匹配(-m state)以及NAT的基础
#对于每个通过netfilter的数据包，内核都会为其生成一个conntrack条目用以跟踪此连接，对于后续通过的数据包，内核会判断若此数据包属于一个已有的连接，
#则更新所对应的conntrack条目的状态(比如更新为ESTABLISHED状态)，否则内核会为它新建一个conntrack条目。
net.netfilter.nf_conntrack_tcp_timeout_established=1200
#tcp会话记录(NAT转换记录)的保留时间，默认是432000秒(5天)
已弃用：
net.inet.udp.checksum = 0
#是否对udp包进行报头校验和(Head checksum)，检查报文头部的完整性。关闭可提高性能，开启则提高安全性
#现在的网卡都支持硬件校验，为了提高CPU的工作效率，已弃用软件校验。
参考资料：
https://www.lixl.cn/2021/082248231.html#toc-heading-24
https://www.cnblogs.com/chuyiwang/p/9529142.html
https://zhuanlan.zhihu.com/p/225531205
https://zhuanlan.zhihu.com/p/395200230
https://www.51cto.com/article/107005.html
https://cloud.tencent.com/developer/article/1026969