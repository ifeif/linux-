iptables的主要功能是实现对网络数据包进出设备及转发的控制。
当数据包需要进入设备、从设备中流出或者由该设备转发、路由时，都可以使用 iptables 进行控制。
iptables将定义好的规则交由内核中的netfilter来读取，dmesg命令可以查看netfilter内核日志。
netfilter是linux内核中的一个数据包处理框架，主要功能包括数据包过滤，连接跟踪(ConnectTrack)，网络地址转换(NAT)。

iptables和firewalld不能共存，它们两个一起使用会有冲突。
由于firewalld需要用到iptables的功能，所以centos自带了一个功能不完整的iptables。
使用iptables还需手动安装完整的iptables服务
卸载firewalld服务：
yum remove -y firewalld
安装并启动iptables服务：
yum install -y iptables-services(ubuntu/debian系统：sudo apt install iptables-persistent)
systemctl start iptables
systemctl enable iptables
命令格式：
iptables [-t 指定要操纵的表]  [-操作 规则链] -选项 [参数]
操作：
-I或--insert：向规则链中插入条目到顶端
-A或--append：向规则链中添加条目到末尾
-D或--delete：从规则链中删除条目
-R或--replace：替换规则链中的条目
-L或--list：显示规则链中已有的条目
-F或--flush：清空规则链中已有的条目
-X或--delete-chain：清空规则为空的自定义链
-Z或--zero：清空规则链中的统计信息
-N或--new：创建新的用户自定义规则链
-C或--check：测试(检查)规则是否已存在，存在则通过"echo $?"命令返回0
-P或--policy：定义内建规则链的默认目标(默认动作、默认策略)，当匹配不到规则时使用默认目标。iptables的默认目标都为ACCEPT。
选项：
-h：显示帮助信息
-s<源地址>：指定要匹配的数据包源ip地址
-d<目的地址>：指定要匹配的数据包目标地址
-j<目标>：jump to target，指定要跳转的目标(执行动作)
-i<网络接口>：指定数据包要进入本机所使用的网络接口
-o<网络接口>：指定数据包要离开本机所使用的网络接口
-p<协议名>：指定要匹配的数据包协议类型，如tcp,udp,icmp,all等
-m<模块名>:启用指定匹配模块(matching module)，模块有tcp,state,iprange,multiport,string,icmp等，可以进行流量控制等个性化功能。
模块参数：
-–tcp-flags：匹配TCP标志，如SYN, ACK, FIN, RST, URG, PSH等
--sport：匹配源端口，与-p tcp|udp一起用，用冒号匹配端口范围"--sport 10:100"
--dport：匹配目标端口，与-p tcp|udp一起用，用冒号匹配端口范围"--sport 10:100"
--src-range：匹配源地址范围
--dst-range：匹配目标地址范围
--mac-source：匹配目标MAC地址
--string：匹配应用层字符串(匹配数据包内容中的指定的字符串，对于加密后的数据包无效)
--algo：匹配查询算法
--state：匹配状态(INVALID、ESTABLISHED、NEW、RELATED)
--icmp-type：匹配icmp数据包类型，如any,echo-request,echo-reply等
--limit n/s：匹配数据包平均传输速率
--connlimit-upto n：匹配现有连接数小于n
--connlimit-above n：匹配现有连接数大于n

iptables默认维护着4个表和5个链。
规则表：
filter：数据包过滤，iptables的默认表，包含INPUT、OUTPUT、FORWARD三个规则链。
nat：网络地址转换表，包含PREROUTING、POSTROUTING、OUTPUT三个规则链。
raw：高级过滤(一般是为了不让iptables做数据包的连接跟踪处理，提高性能)，包含PREROUTING、OUTPUT二个规则链。
mangle：数据包标记位修改，用于实现服务质量，包含所有5个规则链。
注意：iptables规则表处理是有优先级的(raw > mangle > nat > filter)

规则链(链名必须大写)：
INPUT链：处理接收的数据包
OUTPUT链：处理发送的数据包
FORWARD链：处理转发到本机的其他网卡的数据包
PREROUTING链：用于目标地址转换(DNAT)，pre routing意思为路由之前
POSTROUTING链：用于源地址转换(SNAT)，post routing意思为路由之后

执行动作(-j)：
ACCEPT：接收数据包
DROP：丢弃数据包
REJECT：拒绝数据包通过，并传回响应包通知对方
REDIRECT：重定向、映射、透明代理
SNAT：源地址转换
DNAT：目标地址转换
MASQUERADE：动态IP伪装(动态NAT)，能够自动获取正确的外网IP，以前用于ADSL
LOG：将数据包信息记录到日志

iptables命令选项输入顺序：
iptables -t 表名 <-A/I/D/R> 规则链名 [规则号] <-i/o 网卡名> -p 协议名 <-s 源IP/源子网> --sport 源端口 <-d 目标IP/目标子网> --dport 目标端口 -j 执行动作
注：iptables的原理是由上而下的进行规则匹配，找到符合条件的规则即停止。
当放行规则和禁行规则有冲突时，放行规则需放在禁行规则之前才能生效。
一般而言，禁行的规则用-A添加到末尾，放行的规则用-I插入到顶端。
前面drop了，即使后面accept也不会生效。

iptables -L	#不用-t指定表名则默认查看filter表规则
-L操作后的更多选项：
-t 表名	#查看特定表名的规则
-n	#以数字的形式显示主机地址和服务端口号
-v	#列出更多详细信息，包含通过该规则的数据包数量、总字节数以及相应的网络接口。
--line-number	#显示规则编号
快速删除规则：
iptables -t 表名 -L -n --line-numbers	#带编号的形式列出规则
iptables -t 表名 -D 链名 规则编号	#通过编号删除指定规则

iptables -F	#清除预设表filter中的所有规则链中的规则
iptables -X	#删除预设表filter中使用者的自定链
iptables -Z	#清空数据包计数器和字节计数器
iptables-save > /etc/sysconfig/iptables	#永久保存所有规则表，可用-t选项来指定只保存某个规则表
iptables的配置文件路径：
/etc/sysconfig/iptables-config
备份规则表：
iptables-save > 文件名
导入规则表：
iptables-restore < 文件名
手动通过命令添加(输入)的iptables规则都是临时有效的，想要永久生效就必须保存到文件中，CentOS7系统中iptables规则默认保存在/etc/sysconfig/iptables文件中，
使用iptables-save将规则保存至该文件中可以实现永久保存iptables规则的作用，计算机重启后会自动加载该文件中的规则。
注：单独的iptables-save命令并不会保存规则表，只会把要保存的内容输出到屏幕(标准输出stdout)。

由于iptables常用的只有Filter和NAT，所以下面只介绍这两种表。
Filter是iptables的默认表，通常用于搭建防火墙，它有以下三种内建链(chains)：
INPUT链 – 处理来自外部的数据。
OUTPUT链 – 处理向外发送的数据。
FORWARD链 – 将数据转发到本机的其他网卡设备上，处理在本机内转发的数据。
示例：
默认接收所有数据包：
iptables -P INPUT ACCEPT
默认允许本机网卡之间的数据包转发：
iptables -P FORWARD ACCEPT
默认禁止本机网卡之间的数据包转发(相当于关闭IPv4数据包转发)：
iptables -P FORWARD REJECT
开放服务器端口：
iptables -I INPUT -p tcp --dport 目标端口 -j ACCEPT
关闭服务器端口：
iptables -A INPUT -p tcp --dport 目标端口 -j DROP
放行接收指定IP的数据包：
iptables -I INPUT -s 源地址/掩码 -j ACCEPT
禁行接收指定IP的数据包：
iptables -A INPUT -s 源地址/掩码 -j DROP
允许本机所有向外的访问：
iptables -I OUTPUT -j ACCEPT
允许接收远程主机的HTTP请求
iptables -A INPUT -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT
允许发送本地主机的HTTP响应
iptables -A OUTPUT -o eth0 -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT
允许所有人ping本机：
iptables -A INPUT -p icmp -m icmp --icmp-type any -j ACCEPT	#其中--icmp-type any可省略
拒绝所有人ping本机：
iptables -A INPUT -p icmp -m icmp --icmp-type echo-request -j DROP
或
iptables -A OUTPUT -p icmp -m icmp --icmp-type echo-reply -j DROP
限制ssh经过防火墙最大连接数为2个：
iptables -A INPUT -p tcp --dport 22 -m connlimit --connlimit-above 2 -j DROP
拒绝192.168.50.1经过防火墙访问192.168.100.1的22端口：
iptables -A INPUT -p tcp -s 192.168.50.1 -d 192.168.100.1 --dport 22 -j DROP

NAT表一般用于搭建NAT服务器，它有以下三种内建链：
PREROUTING链：
处理从外网刚到达本机并在路由转发(地址转换)到内网前的数据包。它会转换数据包中的目标IP地址，让数据包发送到正确的目的地。
只能用于DNAT(destination NAT)，针对公有网络访问私有网络，并且只能用-i选项指定数据流入的网卡
POSTROUTING链：
处理即将离开内网发送到外网的数据包。它会转换数据包中的源IP地址，目的是让接收方可以发回响应包。如果对方配置了默认网关为当前网卡也可以发回响应包。
只能用于SNAT(source NAT)，针对私有网络访问公有网络，并且只能用-o选项指定数据流出的网卡
OUTPUT链：
处理本机产生的数据包，会在POSTROUTING链之前进行。用于可以用于DNAT(一般不推荐这样用)。
iptables处理数据包的过程：
流入本机：PREROUTING-->INPUT-->用户空间进程
流出本机：用户空间进程-->OUTPUT-->POSTROUTING
本机转发：PREROUTING<-->FORWARD<-->POSTROUTING
本机转发是指本机只负责转发数据包给对应的网卡(NAT服务器至少有2张网卡)，不将数据包提交给进程(服务)处理。

NAT服务器的内网卡地址作为内网用户的网关，而外网卡的地址作为外网用户的网关。
SNAT:
修改流入数据包的来源IP，将原本接收到的来源IP修改为本机的外网卡IP，对方将以修改后的来源IP作为目标IP发回响应包。
假设主机A位于内网，主机B为NAT服务器，主机C位于外网并且拥有公网IP。
内部主机A想访问互联网上的主机C，首先将请求数据包(来源:Aip,目标:Cip)通过路由(网关)发送给NAT服务器B，
B收到后将数据包来源地址改为本机公网网卡的IP(来源:B外网卡ip,目标:Cip)，然后经互联网发送给C，
C收到后将回应包(来源:Cip,目标:B外网卡ip)经互联网发送给B，B收到回应包后根据之前SNAT转换记录修改目标地址为之前发出来的源IP(A主机IP)，
最后将回应包(来源:B内网卡ip,目标:Aip)转发给A主机。
DNAT:
修改流出数据包的目标IP，将原本发送到的目标IP修改为另一个正确的目标IP，对方将以修改后的目标IP作为来源IP发回响应包。
互联网上的主机C想访问内网主机A，但是A的地址是私有地址，无法直接访问。
此时，C可以访问NAT服务器B的公网地址，C的请求包(来源:Cip,目标:B外网卡ip)到达B以后，
B修改数据包的目标地址为内网主机A(来源:Cip,目标:Aip)，并将数据包发送给A主机，A收到后进行回复，
A通过路由(网关)发回响应包(来源:Aip,目标:Cip)到主机B，B根据之前的DNAT转换记录修改来源地址为之前发出来的目标IP(B主机外网卡IP)，
最后将回应包(来源:B外网卡ip,目标:Cip)通过路由(网关)发送到互联网到达C主机。
DNAT就类似外网主机将请求代理给NAT服务器来访问内网主机。
重点：
准确地说，SNAT和DNAT都进行了2次地址转换过程，发送请求包进行一次地址转换，接收响应包也进行了一次地址转换。
在同一网络中SNAT和DNAT的转换互为逆向，实际上转换的内容都是一样的，只是在请求数据包的方式不一样，SNAT直接请求对方IP，而DNAT请求NAT服务器公网的IP。
SNAT发回的响应包就相当于经过DNAT转换，而DNAT发回的响应包就相当于经过SNAT转换，所以在同一网络一起使用SNAT和DNAT不会有冲突。
配置了SNAT，其他网络的数据包不会被第二次DNAT转换，只有之前被SNAT转换过的响应包才会被进行第二次DNAT转换。
配置了DNAT，其他网络的数据包不会被第二次SNAT转换，只有之前被DNAT转换过的响应包才会被进行第二次SNAT转换。
路由转发：
通过路由转发的数据包的标头不会被修改，两台主机通信的原理是在多个设备之间利用路由表建立一条正确的连接。
虽然两台主机都知道对方真正的IP地址，但是只有这整条连接上的所有设备的路由表所构成的路由链才知道对方正确的路径。
可以使用Linux的抓包工具"tcpdump -nn icmp -i 网卡名"来抓取ping包，观察数据包来源地址和目标地址的变化。

NAT转发格式：
DNAT --to-destination：指定数据包转换后的目标地址，仅在PREROUTING链和OUTPUT链中有效，可简写为DNAT --to
SNAT --to-source：指定数据包转换后的的来源地址，仅在POSTROUTING链中有效，可简写为SNAT --to	
REDIRECT --to-port：指定数据包转换后的端口，可简写为REDIRECT --to
 重点：这个"--to-source 来源地址"可以理解成对方发回响应包的地址

MASQUERADE的应用：
MASQUERADE能够自动的获取外网卡上正确的外网地址并进行SNAT转换。
如果没有用-s选项指定数据来源的地址或-o选项指定数据流出的网卡，那么MASQUERADE将对所有网卡进行SNAT转换。
动态NAT：
将接收到的所有数据包的源地址动态转换为主网卡(外网卡)地址：
iptables -t nat -A POSTROUTING -j MASQUERADE
将指定网卡的指定内网网段动态转换为指定外网卡地址：
iptables -t nat -A POSTROUTING -s [内网网段]/[子网掩码] -o [外网卡名] -j MASQUERADE	#-o：指定数据流出的网卡

SNAT的应用：
SNAT如果没有使用-s指定来源地址或-o指定数据流出的网卡，那么SNAT会对所有网卡进行SNAT转换。
静态NAT：
(内网卡接收到内网发送过来的数据包时，修改数据包的内网来源地址为外网卡地址，最后发送给外网)
iptables -t nat -I POSTROUTING -j SNAT --to [外网卡地址]
对指定网段来源的数据包进行静态NAT：
iptables -t nat -I POSTROUTING -s [内网网段]/[子网掩码] -j SNAT --to [外网卡地址]
示例：192.168.50.1<---------->内网卡:192.168.50.254,外网卡:10.10.10.254<---------->10.10.10.10
iptables -t nat -I POSTROUTING -s 192.168.50.0/24 -j SNAT --to 10.10.10.254
将192.168.50.0网段的数据包分摊转换成10.10.10.8、10.10.10.9、10.10.10.10几个公网ip发出去(SNAT成多个地址)
iptables -t nat -A POSTROUTING -s 192.168.50.0/255.255.255.0 -o eth0 -j snat --to-source 10.10.10.8-10.10.10.10
带端口的静态NAT：
默认情况下，内网用什么端口发送请求转换成外网就用什么端口发送请求，如果要转化的外网端口被占用了，会自动替换成1024~65535端口中空闲的端口。
(将数据包来源的内网端口转换为外网端口，其中-m tcp可省略，最后的内网端口也可省略，匹配对应的端口)
iptables -t nat -A POSTROUTING -p tcp -m tcp --dport [内网端口] -j SNAT --to-source [外网卡地址]:[外网端口]

DNAT的应用：
DNAT如果没有使用-d指定目标地址或-i指定数据流入的网卡，那么DNAT会对所有网卡进行DNAT转换。
地址映射：
(外网卡接收到外网发送过来的数据包时，修改数据包的外网目的地址为内网用户地址，最后发送给内网)
iptables -t nat -A PREROUTING -j DNAT --to [内网用户地址]
端口映射：
(外网端口映射到内网端口，其中-m tcp可省略，最后的内网端口也可省略，映射到对应的端口)
iptables -t nat -A PREROUTING -p tcp -m tcp --dport [外网端口] -j DNAT --to-destination [内网用户地址]:[内网端口]
对指定目的地址的数据包进行端口映射：
iptables -t nat -A PREROUTING -d [外网卡地址]/[子网掩码] -p tcp --dport [外网端口]-j DNAT --to-destination [内网用户地址]:[内网端口]
示例：192.168.50.1:80<----------内网卡:192.168.50.254,外网卡:10.10.10.254<----------10.10.10.10:8080
iptables -t nat -A PREROUTING -d 10.10.10.10 -p tcp --dport 8080-j DNAT --to-destination 192.168.50.1:80
服务端端口重定向：
iptables -t nat -A PREROUTING -i [外网卡名] -p tcp --dport 80 -j REDIRECT --to-port 8090		#服务端请求的80端口重定向到8090
iptables -t nat -A PREROUTING -i [外网卡名] -p tcp --dport 80 -j DNAT --to-destination :8090	#同上，第二种写法
客户端端口重定向：
iptables -t nat -A PREROUTING -i [内网卡名] -p tcp --dport 80 -j REDIRECT --to-port 8090		#客户端请求的80端口重定向到服务端的8090
或者
iptables -t nat -A PREROUTING -d [服务端IP] -p tcp --dport 80 -j REDIRECT --to-port 8090		#只对目的地址为服务器IP和目的端口为80的请求数据包进行端口重定向
DNS重定向(智能DNS)：
DNS客户端无论设置成任何IP，都会重定向到服务器指定的一个DNS服务器ip，DNS用到了tcp和udp。
iptables -t nat -I PREROUTING -i [内网卡名] -p tcp --dport 53 -j DNAT --to 114.114.114.114:53
iptables -t nat -I PREROUTING -i [内网卡名] -p udp --dport 53 -j DNAT --to 114.114.114.114:53
在linux里实现nat转发：
内网主机IP：192.168.1.1
NAT服务器：
内网IP为192.168.1.254，不配置网关
公网IP为114.114.114.114(eth0)，配置网关
静态转发：将192.168.1.0网段的数据包转发给114.114.114.114并将数据包的源地址转换为114.114.114.114
iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o eth0 -j SNAT --to 114.114.114.114
动态转发：将接收到的所有网段的数据包转发给公网卡并将数据包的源地址转换为公网卡IP(eth0)
iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
端口映射：外网主机114.114.114.114的2222端口映射到内网主机192.168.1.1的22端口：
iptables -t nat -A PREROUTING -d 114.114.114.114/32 -p tcp -m tcp --dport 2222 -j DNAT --to-destination 192.168.1.1:22
iptables-save > /etc/sysconfig/iptables	#永久保存

打开IPv4数据包转发：
当linux服务器需要在多张网卡之间转发数据包时必须开启该功能，也是linux作为路由器或NAT服务器的基础。
一般客户端主机接收到数据包的目的地址不是本机的IP会直接丢弃，所以linux默认不打开数据包转发功能，需手动打开数据包转发。
echo 1 > /proc/sys/net/ipv4/ip_forward		#临时生效，proc目录存放当前内核运行状态的参数文件
或者
sysctl -w net.ipv4.ip_forward=1		#临时生效，通过命令开启
net.ipv4.ip_forward = 1 >> /etc/sysctl.conf	#永久生效
sysctl -p或者systemctl restart network		#读取配置，立即生效

配置默认网关：
NAT服务器配置完SNAT之后，如果想要通过NAT服务器访问外网，还需要配置服务器的默认网关，否则只能访问与NAT服务器的外网卡相同网段的主机。
当然，也可以细化路由表，而不直接配置默认网关将所有数据包发往一张网卡。
route add -net 0.0.0.0/24 gw 网关地址	#将任何地址的数据发转发给网关，0.0.0.0代表任何地址
DNAT不需要配置默认网关，因为DNAT是将数据包的目的地址修改为内网相同网段的主机的地址，而内网相同网段的主机不需要路由就能直接访问。
误区：在服务器的某张网卡上配置了默认网关，重启服务器或network服务时服务器会读取每张网卡的配置文件，然后将网关信息添加进路由表。
所以这个默认网关(gateway)不是属于这张网卡的，而是属于这台服务器的，由服务器根据路由表决定(管理)将数据包发往哪张网卡。
iptables默认是不会区分公有地址和私有地址，这些都需要自己手动配置iptables规则，来禁止私有地址被转发到公网。

关于主网卡：
通常服务器会有许多块网卡，因此也可能会连接到不同的网络，在隔离的网络中，
某些服务可能会需要进行通信，此时服务器经过配置就可以承担起了转发数据包的功能。
默认情况下，服务器将所有未知地址(外部地址)的数据包发送给主网卡。
当一台服务器有多张网卡，那么带有网关的那张网卡作为主网卡。
当多张网卡都配置了网关，那么就以最先启动的网卡作为主网卡。
也就是从上往下匹配路由规则，那么会匹配到最先添加到路由表的默认路由，停止之后的匹配。
需要注意的是，从网关流入的数据包不会再转发给网关，相当于忽略默认路由这条规则。
可以用route -n命令查看路由表。在虚拟机中，开机最先启动的网卡是eno16777736.
destination	gateway		netmask		iface
192.168.1.0	0.0.0.0		255.255.255.0	eth0
172.16.0.0	0.0.0.0		255.255.0.0	eth1
0.0.0.0		172.16.1.254	0.0.0.0		eth1
destination代表目标网络，netmask代表目标网络的子网掩码，iface代表网络接口(网卡)。
gateway代表下一台设备地址(网关)，0.0.0.0表示下一台设备地址无效，转而使用eth0接口作为192.168.1.0/24网络的入口。
当destination为0.0.0.0和netmask为0.0.0.0时，代表任何网络地址的数据包
当destination为192.168.1.1和netmask为255.255.255.255时，代表192.168.1.1这一台设备的数据包
当添加了两张网卡，那么linux会生成对应的直连路由，让数据包可以经过这两张网卡传输。
第一条记录的意思是网络号为192.168.1.0/24的数据包发往eth0接口
第二条记录的意思是网络号为172.16.0.0/16的数据包发往eth1接口
第三条记录的意思是任何网络的数据包都发往172.16.1.254这台设备

iptables用于过滤IPv4的数据包，此外还有个ip6tables命令用于过滤IPv6的数据包，规则的写法类似，但又不尽相同(不完全相同)
更多资料：
https://www.weixueyuan.net/a/555.html
https://zhuanlan.zhihu.com/p/441089738
https://www.cnblogs.com/zclzhao/p/5081590.html
https://www.cnblogs.com/wxq008/p/6812839.html
https://cloud.tencent.com/developer/article/1456934
https://blog.csdn.net/beanewself/article/details/78317626
https://www.cnblogs.com/chenxiaomeng/p/12384598.html
https://blog.csdn.net/weixin_33828101/article/details/86260112
https://blog.csdn.net/chengxuyuanyonghu/article/details/51897666
https://juejin.cn/post/7008945265021288484
https://zhuanlan.zhihu.com/p/567556545

错误内容(花絮)：
SNAT --to-source：参数为进行SNAT转换的内网地址，仅在POSTROUTING链中有效，可简写为SNAT --to
(内网卡接收到内网发送过来的数据包时，匹配内网地址并修改数据包的内网源地址为外网卡ip，最后发送给外网)
(匹配内网端口映射到外网端口，其中-m tcp可省略，最后的内网端口也可省略，匹配对应的端口)
DNAT不会还原响应包的ip，响应包通过路由(网关)发回。
MASQUERADE能够自动的获取外网卡上的地址并将内网源地址修改为当前正确的外网地址
而两台主机都不知道对方真正的IP地址，知道对方IP的只有这整条连接上的所有设备的路由表所构成的路由链。
在同一网络中SNAT和DNAT的转换刚好重叠